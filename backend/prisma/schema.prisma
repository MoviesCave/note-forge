generator client{
    provider = "prisma-client-js"
}

datasource db{
    provider = "postgresql"
    url = env("DIRECT_URL")
}

model User{
    id String @id @default(uuid())
    name String @unique
    email String @unique
    password String
    role Role
    sessions Session[] @relation("UserToSession")
    subjects Subject[] @relation("UserToSubject")
    assignments Assignment[] @relation("UserToAssignment")
    solutions Solution[] @relation("UserToSolution")
    notes Note[] @relation("UserToNote")
    papers Paper[] @relation("UserToPaper")
    resources Resource[] @relation("UserToResource")
    books Book[] @relation("UserToBook")
    createdAt DateTime @default(now())

    @@index([id,name,email])
}

enum Role{
    admin
    contributor
}

model Verify{
    id String @id @default(uuid())
    email String
    code String @db.VarChar(6)
    createdAt DateTime @default(now())
}

model Session{
    id String @id @default(uuid())
    cookie String
    browser String
    userId String
    user User @relation("UserToSession",fields: [userId],references: [id])
    createdAt DateTime @default(now())

    @@index([userId,cookie])
}

model PasswordReset{
    id String @id @default(uuid())
    email String
    reset_token String
    createdAt DateTime @default(now())
}

model Subject{
    id String @id @default(uuid())
    name String @unique
    users User[] @relation("UserToSubject")
    assignments Assignment[] @relation("SubjectToAssignment")
    notes Note[] @relation("SubjectToNote")
    exams Exam[] @relation("SubjectToExam")
    createdAt DateTime @default(now())

    @@index([id])
}

model Assignment{
    id String @id @default(uuid())
    title String
    deadline DateTime
    subjectId String
    subject Subject @relation("SubjectToAssignment",fields: [subjectId],references: [id])
    userId String
    user User @relation("UserToAssignment",fields: [userId],references: [id])
    solutions Solution[] @relation("AssignmentToSolution")
    createdAt DateTime @default(now())

    @@index([subjectId,userId,deadline,id])
}

model Resource{
    id String @id @default(uuid())
    title String
    content String
    link String
    userId String
    user User @relation("UserToResource",fields: [userId], references: [id])
    createdAt DateTime @default(now())

    @@index([userId])
}

model Book{
    id String @id @default(uuid())
    title String
    imgUrl String
    link String
    userId String
    user User @relation("UserToBook",fields: [userId], references: [id])
    createdAt DateTime @default(now())

    @@index([userId])
}

model Solution{
    id String @id @default(uuid())
    content String
    link String
    assignmentId String
    assignment Assignment @relation("AssignmentToSolution",fields: [assignmentId],references: [id])
    userId String
    user User @relation("UserToSolution",fields: [userId],references: [id])
    createdAt DateTime @default(now())

    @@index([assignmentId,userId])
}

model Note{
    id String @id @default(uuid())
    title String
    content String
    link String
    subjectId String
    subject Subject @relation("SubjectToNote", fields: [subjectId], references: [id])
    userId String
    user User @relation("UserToNote",fields: [userId],references: [id])
    createdAt DateTime @default(now())

    @@index([subjectId,userId])
}

model Exam{
    id String @id @default(uuid())
    title String
    deadline DateTime
    subjectId String
    subject Subject @relation("SubjectToExam",fields: [subjectId], references: [id])
    papers Paper[] @relation("ExamToPaper")
    createdAt DateTime @default(now())

    @@index([subjectId,id,deadline])
}

model Paper{
    id String @id @default(uuid())
    title String
    link String
    examId String
    exam Exam @relation("ExamToPaper",fields: [examId],references: [id])
    userId String
    user User @relation("UserToPaper", fields: [userId], references: [id])
    createdAt DateTime @default(now())

    @@index([examId,userId,id])
}